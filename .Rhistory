db = -det(B)
print(db)
Bp = solve(B) * db
print(Bp)
b = c(-128, -266, 157, 184)
Bpb = Bp %*% b
print(Bpb)
pi = rbind(c(240, -1024, 1, 0),
c(520, -2288, 0, 0),
c(-300, 1324, 0, 0),
c(-360, 1600, 0, 1))
Bppi = Bp %*% pi
print(Bppi)
B = rbind(c(-68, 17, 0),
c(40, -4, 1),
c(44, -1, 0))
db = -det(B)
print(db)
Bp = solve(B) * db
print(Bp)
b = c(-442, 304, 314)
Bpb = Bp %*% b
print(Bpb)
db = det(B)
print(db)
Bp = solve(B) * db
print(Bp)
b = c(-442, 304, 314)
Bpb = Bp %*% b
print(Bpb)
pi = rbind(c(-102, -1088, 1258, 1, 0),
c(54, 688, -818, 0, 1),
Bppi = Bp %*% pi
pi = rbind(c(-102, -1088, 1258, 1, 0),
pi = rbind(c(-102, -1088, 1258, 1, 0),
c(80, 848, -960, 0, 0),
c(54, 688, -818, 0, 1))
Bppi = Bp %*% pi
print(Bppi)
cbt = t(c(9, 2, 0)
print(cbt %*% Bppi - db*cpt)
cbt = t(c(9, 2, 0)
print(cbt %*% Bppi - db*cpt)
cbt = t(c(9, 2, 0))
cpt = t(c(1, 3, 10, 0, 0))
print(cbt %*% Bppi - db*cpt)
print(cbt %*% Bpb)
xb = solve(B, b)
print(xb * db)
print(cbt %*% xb * db)
B = rbind(c(-25, -12, -21, 1, 0),
c(-10, -6, -1, -5, 0, 0),
c(-90, 45, 0, 0, 0),
c(90, -45, 0, 0, 1),
c(2, 2, 2, 0, 0))
B = rbind(c(-25, -12, -21, 1, 0),
c(-10, -6, -5, 0, 0),
c(-90, 45, 0, 0, 0),
c(90, -45, 0, 0, 1),
c(2, 2, 2, 0, 0))
db = det(B)
print(db)
Bp = solve(B) * db
print(Bp)
b = c(-10000, -15000, 5, 5, 0)
Bpb = Bp %*% b
print(Bpb)
B = rbind(c(-25, -12, 0  , 1, 0),
c(-10, -6 , 0  , 0, 0),
c(-90, 45 , 450, 0, 0),
c(90 , -45, -450, 0, 1),
c(2  , 2  , -23, 0, 0))
db = det(B)
print(db)
Bp = solve(B) * db
print(Bp)
b = c(-10000, -15000, 5, 5, 0)
Bpb = Bp %*% b
print(Bpb)
B = rbind(c(-25, -12, 0  , 1, 0),
c(-10, -6 , 0  , 0, 0),
c(-90, 45 , 450, 0, 0),
c(90 , -45, -450, 0, 1),
c(2  , 2  , -23, 0, 0))
Binv = solve(B)
print(Binv)
print(Binv %*% 630)
print(Binv * 630)
print(Binv %*% B)
b = c(-10000, -15000. 5, 5, 0)
print(Binv %*% b)
b = c(-10000, -15000, 5, 5, 0)
print(Binv %*% b)
cb = t(c(476, 212, 53, 0, 0))
pi = rbind(c(0, 0, 0, 0),
c(0, 1, 0, 0),
c(450, 0, 1, 0),
c(-450, 0, 0, 0),
c(-23, 0, 0, 1))
print(cb %*% Binv %*% pi)
print(Binv %*% pi)
print(cb %*% Binv %*% pi - cp)
cb = t(c(476, 212, 53, 0, 0))
cp = t(c(648, 0, 0, 0))
pi = rbind(c(0   , 0, 0, 0),
c(0   , 1, 0, 0),
c(450 , 0, 1, 0),
c(-450, 0, 0, 0),
c(-23 , 0, 0, 1))
print(Binv %*% pi)
print(cb %*% Binv %*% pi - cp)
print(cb %*% Binv %*% b)
truth = rbind(c(1, 0),
c(1, 0),
c(1, 0),
c(1, 0),
c(1, 0),
c(0, 1),
c(0, 1),
c(0, 1),
c(0, 1),
c(0, 1))
ten = rbind(c(0.9, 0.1),
c(0.9, 0.1),
c(0.9, 0.1),
c(0.9, 0.1),
c(0.9, 0.1),
c(0.1, 0.9),
c(0.1, 0.9),
c(0.1, 0.9),
c(0.1, 0.9),
c(0.1, 0.9))
eight = rbind(c(0.875, 0.125),
c(0.875, 0.125),
c(0.875, 0.125),
c(0.875, 0.125),
c(1, 0.),
c(0.125, 0.875),
c(0.125, 0.875),
c(0.125, 0.875),
c(0.125, 0.875),
c(0, 1))
six = rbind(c(0.83, 0.17),
c(0.83, 0.17),
c(0.83, 0.17),
c(1, 0),
c(1, 0),
c(0.17, 0.83),
c(0.17, 0.83),
c(0.17, 0.83),
c(0, 1),
c(0, 1))
four = rbind(c(0.75, 0.25),
c(0.75, 0.25),
c(1, 0),
c(1, 0),
c(1, 0),
c(0.25, 0.75),
c(0.25, 0.75),
c(0, 1),
c(0, 1),
c(0, 1))
two = rbind(c(0.5, 0.5),
c(1, 0),
c(1, 0),
c(1, 0),
c(1, 0),
c(0.5, 0.5),
c(0, 1),
c(0, 1),
c(0, 1),
c(0, 1))
alpha <- function(x1, x2)
{
#Xalpha
Xivector <- x1/norm(x1, type="2")
Xjvector <- x2/norm(x2, type="2")
#print(Xivector)
#print(Xjvector)
#print(Xivector %*% Xjvector)
Xalpha <- (Xivector %*% Xjvector)[1,1]
print(x1 - x2)
return(norm(x1 - x2, type="1"))
}
gamma <- function(x1, x2, y1, y2, p)
{
ax <- alpha(x1, x2)
ay <- alpha(y1, y2)
return (1 - (abs(ax-ay))**p)
}
PRI <-function(X, Y, p)
{
sum <- 0
for(i in 1:nrow(X)){
for(j in 1:i){
if(i==j){
next
}
sum <- sum + gamma(X[i,], X[j,], Y[i,], Y[j,], p)
}
}
return(sum/choose(nrow(X), 2))
}
p0125 = c(PRI(ten, truth, 0.125), PRI(eight, truth, 0.125), PRI(six, truth, 0.125), PRI(four, truth, 0.125), PRI(two, truth, 0.125))
p025 = c(PRI(ten, truth, 0.25), PRI(eight, truth, 0.25), PRI(six, truth, 0.25), PRI(four, truth, 0.25), PRI(two, truth, 0.25))
p05 = c(PRI(ten, truth, 0.5), PRI(eight, truth, 0.5), PRI(six, truth, 0.5), PRI(four, truth, 0.5), PRI(two, truth, 0.5))
p1 = c(PRI(ten, truth, 1), PRI(eight, truth, 1), PRI(six, truth, 1), PRI(four, truth, 1), PRI(two, truth, 1))
p1 = c(PRI(ten, truth, 1), PRI(eight, truth, 1), PRI(six, truth, 1), PRI(four, truth, 1), PRI(two, truth, 1))
p2 = c(PRI(ten, truth, 2), PRI(eight, truth, 2), PRI(six, truth, 2), PRI(four, truth, 2), PRI(two, truth, 2))
p3 = c(PRI(ten, truth, 3), PRI(eight, truth, 3), PRI(six, truth, 3), PRI(four, truth, 3), PRI(two, truth, 3))
p5 = c(PRI(ten, truth, 5), PRI(eight, truth, 5), PRI(six, truth, 5), PRI(four, truth, 5), PRI(two, truth, 5))
plot(p05, type="o", col="blue", ylim=c(0,1))
alpha <- function(x1, x2)
{
print(x1 - x2)
return(norm(x1 - x2, type="1"))
}
gamma <- function(x1, x2, y1, y2, p)
{
ax <- alpha(x1, x2)
ay <- alpha(y1, y2)
return (1 - (abs(ax-ay))**p)
}
PRI <-function(X, Y, p)
{
sum <- 0
for(i in 1:nrow(X)){
for(j in 1:i){
if(i==j){
next
}
sum <- sum + gamma(X[i,], X[j,], Y[i,], Y[j,], p)
}
}
return(sum/choose(nrow(X), 2))
}
p0125 = c(PRI(ten, truth, 0.125), PRI(eight, truth, 0.125), PRI(six, truth, 0.125), PRI(four, truth, 0.125), PRI(two, truth, 0.125))
alpha <- function(x1, x2)
{
print(str(x1 - x2))
return(norm(x1 - x2, type="1"))
}
gamma <- function(x1, x2, y1, y2, p)
{
ax <- alpha(x1, x2)
ay <- alpha(y1, y2)
return (1 - (abs(ax-ay))**p)
}
PRI <-function(X, Y, p)
{
sum <- 0
for(i in 1:nrow(X)){
for(j in 1:i){
if(i==j){
next
}
sum <- sum + gamma(X[i,], X[j,], Y[i,], Y[j,], p)
}
}
return(sum/choose(nrow(X), 2))
}
p0125 = c(PRI(ten, truth, 0.125), PRI(eight, truth, 0.125), PRI(six, truth, 0.125), PRI(four, truth, 0.125), PRI(two, truth, 0.125))
alpha <- function(x1, x2)
{
print(str(x1 - x2))
return(norm((x1 - x2), type="1"))
}
gamma <- function(x1, x2, y1, y2, p)
{
ax <- alpha(x1, x2)
ay <- alpha(y1, y2)
return (1 - (abs(ax-ay))**p)
}
PRI <-function(X, Y, p)
{
sum <- 0
for(i in 1:nrow(X)){
for(j in 1:i){
if(i==j){
next
}
sum <- sum + gamma(X[i,], X[j,], Y[i,], Y[j,], p)
}
}
return(sum/choose(nrow(X), 2))
}
p0125 = c(PRI(ten, truth, 0.125), PRI(eight, truth, 0.125), PRI(six, truth, 0.125), PRI(four, truth, 0.125), PRI(two, truth, 0.125))
alpha <- function(x1, x2)
{
print(x1)
print(x2)
print(str(x1 - x2))
return(norm((x1 - x2), type="1"))
}
gamma <- function(x1, x2, y1, y2, p)
{
ax <- alpha(x1, x2)
ay <- alpha(y1, y2)
return (1 - (abs(ax-ay))**p)
}
PRI <-function(X, Y, p)
{
sum <- 0
for(i in 1:nrow(X)){
for(j in 1:i){
if(i==j){
next
}
sum <- sum + gamma(X[i,], X[j,], Y[i,], Y[j,], p)
}
}
return(sum/choose(nrow(X), 2))
}
p0125 = c(PRI(ten, truth, 0.125), PRI(eight, truth, 0.125), PRI(six, truth, 0.125), PRI(four, truth, 0.125), PRI(two, truth, 0.125))
alpha <- function(x1, x2)
{
print(x1)
print(x2)
print(str(x1 - x2))
return(norm(data.matrix(x1 - x2), type="1"))
}
gamma <- function(x1, x2, y1, y2, p)
{
ax <- alpha(x1, x2)
ay <- alpha(y1, y2)
return (1 - (abs(ax-ay))**p)
}
PRI <-function(X, Y, p)
{
sum <- 0
for(i in 1:nrow(X)){
for(j in 1:i){
if(i==j){
next
}
sum <- sum + gamma(X[i,], X[j,], Y[i,], Y[j,], p)
}
}
return(sum/choose(nrow(X), 2))
}
p0125 = c(PRI(ten, truth, 0.125), PRI(eight, truth, 0.125), PRI(six, truth, 0.125), PRI(four, truth, 0.125), PRI(two, truth, 0.125))
alpha <- function(x1, x2)
{
return(norm(data.matrix(x1 - x2), type="1"))
}
gamma <- function(x1, x2, y1, y2, p)
{
ax <- alpha(x1, x2)
ay <- alpha(y1, y2)
return (1 - (abs(ax-ay))**p)
}
PRI <-function(X, Y, p)
{
sum <- 0
for(i in 1:nrow(X)){
for(j in 1:i){
if(i==j){
next
}
sum <- sum + gamma(X[i,], X[j,], Y[i,], Y[j,], p)
}
}
return(sum/choose(nrow(X), 2))
}
p0125 = c(PRI(ten, truth, 0.125), PRI(eight, truth, 0.125), PRI(six, truth, 0.125), PRI(four, truth, 0.125), PRI(two, truth, 0.125))
p025 = c(PRI(ten, truth, 0.25), PRI(eight, truth, 0.25), PRI(six, truth, 0.25), PRI(four, truth, 0.25), PRI(two, truth, 0.25))
p05 = c(PRI(ten, truth, 0.5), PRI(eight, truth, 0.5), PRI(six, truth, 0.5), PRI(four, truth, 0.5), PRI(two, truth, 0.5))
p1 = c(PRI(ten, truth, 1), PRI(eight, truth, 1), PRI(six, truth, 1), PRI(four, truth, 1), PRI(two, truth, 1))
p2 = c(PRI(ten, truth, 2), PRI(eight, truth, 2), PRI(six, truth, 2), PRI(four, truth, 2), PRI(two, truth, 2))
p3 = c(PRI(ten, truth, 3), PRI(eight, truth, 3), PRI(six, truth, 3), PRI(four, truth, 3), PRI(two, truth, 3))
p5 = c(PRI(ten, truth, 5), PRI(eight, truth, 5), PRI(six, truth, 5), PRI(four, truth, 5), PRI(two, truth, 5))
plot(p05, type="o", col="blue", ylim=c(0,1))
lines(p1, type="o", col="red")
lines(p2, type="o", col="green")
lines(p3, type="o", col="blue")
lines(p025, type="o", col="orange")
lines(p0125, type="o", col="purple")
lines(p5, type="o", col="purple")
print(p5)
print(p1)
alpha <- function(x1, x2)
{
return(norm(data.matrix(x1 - x2), type="1")/2)
}
gamma <- function(x1, x2, y1, y2, p)
{
ax <- alpha(x1, x2)
ay <- alpha(y1, y2)
return (1 - (abs(ax-ay))**p)
}
PRI <-function(X, Y, p)
{
sum <- 0
for(i in 1:nrow(X)){
for(j in 1:i){
if(i==j){
next
}
sum <- sum + gamma(X[i,], X[j,], Y[i,], Y[j,], p)
}
}
return(sum/choose(nrow(X), 2))
}
p0125 = c(PRI(ten, truth, 0.125), PRI(eight, truth, 0.125), PRI(six, truth, 0.125), PRI(four, truth, 0.125), PRI(two, truth, 0.125))
p025 = c(PRI(ten, truth, 0.25), PRI(eight, truth, 0.25), PRI(six, truth, 0.25), PRI(four, truth, 0.25), PRI(two, truth, 0.25))
p05 = c(PRI(ten, truth, 0.5), PRI(eight, truth, 0.5), PRI(six, truth, 0.5), PRI(four, truth, 0.5), PRI(two, truth, 0.5))
p1 = c(PRI(ten, truth, 1), PRI(eight, truth, 1), PRI(six, truth, 1), PRI(four, truth, 1), PRI(two, truth, 1))
p2 = c(PRI(ten, truth, 2), PRI(eight, truth, 2), PRI(six, truth, 2), PRI(four, truth, 2), PRI(two, truth, 2))
p3 = c(PRI(ten, truth, 3), PRI(eight, truth, 3), PRI(six, truth, 3), PRI(four, truth, 3), PRI(two, truth, 3))
p5 = c(PRI(ten, truth, 5), PRI(eight, truth, 5), PRI(six, truth, 5), PRI(four, truth, 5), PRI(two, truth, 5))
plot(p05, type="o", col="blue", ylim=c(0,1))
lines(p1, type="o", col="red")
lines(p2, type="o", col="green")
lines(p3, type="o", col="blue")
lines(p025, type="o", col="orange")
lines(p0125, type="o", col="purple")
lines(p5, type="o", col="purple")
print(p5)
print(p1)
truth = rbind(c(1, 0, 0),
c(1, 0, 0),
c(1, 0, 0),
c(0, 1, 0),
c(0, 1, 0),
c(0, 1, 0),
c(0, 0, 1),
c(0, 0, 1),
c(0, 0, 1))
all_bad = rbind(c(0.67, 0.16, 0.17),
c(0.67, 0.16, 0.17),
c(0.67, 0.16, 0.17),
c(0.17, 0.67, 0.16),
c(0.17, 0.67, 0.16),
c(0.17, 0.67, 0.16),
c(0.16, 0.17, 0.67),
c(0.16, 0.17, 0.67),
c(0.16, 0.17, 0.67))
two_bad = rbind(c(0.5, 0.25, 0.25),
c(0.5, 0.25, 0.25),
c(0.5, 0.25, 0.25),
c(0.25, 0.5, 0.25),
c(0.25, 0.5, 0.25),
c(0.25, 0.5, 0.25),
c(0, 0, 1),
c(0, 0, 1),
c(0, 0, 1))
one_bad = rbind(c(1, 0, 0),
c(1, 0, 0),
c(1, 0, 0),
c(0, 1, 0),
c(0, 1, 0),
c(0, 1, 0),
c(0.5, 0.5, 0),
c(0.5, 0.5, 0),
c(0.5, 0.5, 0))
alpha <- function(x1, x2)
{
return(norm(data.matrix(x1 - x2), type="1")/2)
}
gamma <- function(x1, x2, y1, y2, p)
{
ax <- alpha(x1, x2)
ay <- alpha(y1, y2)
return (1 - (abs(ax-ay))**p)
}
PRI <-function(X, Y, p)
{
sum <- 0
for(i in 1:nrow(X)){
for(j in 1:i){
if(i==j){
next
}
sum <- sum + gamma(X[i,], X[j,], Y[i,], Y[j,], p)
}
}
return(sum/choose(nrow(X), 2))
}
p0125 = c(PRI(all_bad, truth, 0.125), PRI(two_bad, truth, 0.125), PRI(one_bad, truth, 0.125))
p025 = c(PRI(all_bad, truth, 0.25), PRI(two_bad, truth, 0.25), PRI(one_bad, truth, 0.25))
p05 =c(PRI(all_bad, truth, 0.5), PRI(two_bad, truth, 0.5), PRI(one_bad, truth, 0.5))
p1 = c(PRI(all_bad, truth, 1), PRI(two_bad, truth, 1), PRI(one_bad, truth, 1))
p2 = c(PRI(all_bad, truth, 2), PRI(two_bad, truth, 2), PRI(one_bad, truth, 2))
p3 = c(PRI(all_bad, truth, 3), PRI(two_bad, truth, 3), PRI(one_bad, truth, 3))
p5 = c(PRI(all_bad, truth, 5), PRI(two_bad, truth, 5), PRI(one_bad, truth, 5))
plot(p05, type="o", col="blue", ylim=c(0,1))
lines(p1, type="o", col="red")
lines(p2, type="o", col="green")
lines(p3, type="o", col="blue")
lines(p025, type="o", col="orange")
lines(p0125, type="o", col="purple")
lines(p5, type="o", col="purple")
print(p5)
print(p1)
setwd("C:/Users/ryand")
library(devtools)
install("FuzzyClusteringSimilarity.R")
fuzzy_setup()
?fuzzy_setup
?andc
library(roxygen2)
?andc
library(FuzzyClusteringSimilarity.R)
fuzzy_setup()
x = cbind(c(0.5, 0.5, 0), c(0.5, 0.5, 0), c(0, 0, 1))
y = cbind(c(0.5, 0.5, 0), c(1, 0, 0), c(0, 0, 1))
andc(x, y, "fit")
library(JuliaCall)
andc(x, y, "fit")
setwd("C:/Users/ryand/FuzzyClusteringSimilarity.R")
document()
q()
